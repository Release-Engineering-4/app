name: Deploy
on: push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.11

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry install

      - name: Pylint source directories
        working-directory: src
        run: poetry run pylint $(git ls-files '*.py')

      - name: Lint with flake8
        working-directory: src
        run: poetry run flake8 .

      - name: Registry Login (ghcr.io)
        run: |
          echo "${{secrets.GH_TOKEN}}" | docker login ghcr.io -u ${{github.actor}} --password-stdin
      
      - name: Parse version info from tag
        run: |
          VERSION=${GITHUB_REF:11}
          MAJOR=`echo "$VERSION" | cut -d . -f 1`
          MINOR=`echo "$VERSION" | cut -d . -f 2`
          PATCH=`echo "$VERSION" | cut -d . -f 3`
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "version_major=$MAJOR" >> $GITHUB_ENV
          echo "version_minor=$MINOR" >> $GITHUB_ENV
          echo "version_patch=$PATCH" >> $GITHUB_ENV
  
      - name: Build and Push Docker Image
        run: |
          IMG=ghcr.io/${{steps.lower-repo.outputs.repository}}
          docker build \
            --tag $IMG:${{env.version}} \
            --tag $IMG:${{env.version_major}}.${{env.version_minor}}.latest \
            --tag $IMG:${{env.version_major}}.latest \
            --tag $IMG:latest \
            .
          docker push --all-tags $IMG
      
      - name: Start minikube
        id: minikube
        uses: medyagh/setup-minikube@master

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.10.0
      
      - name: Helm add Prometheus
        run: |
          helm repo add prom-repo https://prometheus-community.github.io/helm-charts
          helm repo update
          helm install myprom prom-repo/kube-prometheus-stack
    
      - name: Deploy to minikube
        run:
          kubectl apply -f kubernetes.yml
      
      - name: Sleep for 300 seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '300s'
          
      - name: Test service URLs
        run: |
          kubectl get all
          minikube service list
          minikube service app --url
          echo "------------------opening the service------------------"
          curl $(minikube service app --url) 